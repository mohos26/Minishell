
#include "header.h"

/* ------------ Memory Management Flags ------------
Flag 3: Free all session-specific (local) allocations.
Flag 2: Track memory for the current session.
Flag 1: Free all global allocations.
Flag 0: Track memory for the entire program lifetime.
*/

static void	ft_mem_tracker(void *ptr, int flag)
{
	static void	*lst_global[100000];
	static void	*lst_local[INT_MAX];
	static int	i;
	static int	j;
	static int	d;

	if (flag == 3)
	{
		d = 0;
		j = 0;
		while (lst_local[d])
		{
			free(lst_local[d]);
			lst_local[d++] = NULL;
		}
	}
	else if (flag == 2)
		lst_local[j++] = ptr;
	else if (flag == 1)
	{
		d = 0;
		i = 0;
		while (lst_global[d])
		{
			free(lst_global[d]);
			lst_global[d++] = NULL;
		}
	}
	else
		lst_global[i++] = ptr;
}

void	ft_free(void)
{
	ft_mem_tracker(NULL, 3);
}

void	ft_exit(int status)
{
	ft_mem_tracker(NULL, 3);
	ft_mem_tracker(NULL, 1);
	exit(status);
}

/* ------------ Memory Allocation Flags ------------
Flag 1: Allocate and track memory for the current session.
Flag 0: Allocate and track memory for the entire program lifetime.
*/

void	*ft_calloc(size_t size, int flag)
{
	void	*ptr;

	ptr = malloc(size);
	if (!ptr)
		ft_exit(1);
	ft_bzero(ptr, size);
	if (flag)
		ft_mem_tracker(ptr, 2);
	else
		ft_mem_tracker(ptr, 0);
	return (ptr);
}
