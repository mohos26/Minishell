--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------
------------------------------ Functions Of MiniShell --------------------------------
--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

**************************************************************************************
************************************** Parsing ***************************************
**************************************************************************************


+ char *readline(const char *)
	like 'input' in python3.
--------------------------------------------------------------------------------------
+ rl_clear_history
	?
--------------------------------------------------------------------------------------
+ rl_on_new_line
	?
--------------------------------------------------------------------------------------
+ rl_replace_line
	?
--------------------------------------------------------------------------------------
+ rl_redisplay
	?
--------------------------------------------------------------------------------------
+ int add_history(const char *)
	if you click 'Up arrow' in bash, you can
look your history. same thing, if you get
a str to 'add_history' you can scroll it.
--------------------------------------------------------------------------------------
+ signal, sigaction, sigemptyset, sigaddset, kill
	?
--------------------------------------------------------------------------------------
+ int tcsetattr(int, int, const struct termios *)
	The tcsetattr function is used to modify terminal settings on Unix/Linux systems.
It is part of the terminal control library, and is primarily used to change the I/O
behavior of the command line or serial devices.
Parameters:
	fd → Terminal file descriptor (usually STDIN_FILENO for input, or STDOUT_FILENO for output).
	optional_actions → Specifies when changes are applied. Possible values:
		TCSANOW → Apply changes immediately.
		TCSADRAIN → Apply changes after flushing (sending) all pending data into the output buffer.
		TCSAFLUSH → Clear all pending data in input and output before applying changes.
	termios_p → Pointer to a struct termios containing the new terminal settings:
		struct termios {
			tcflag_t        c_iflag;        /* input flags */
			tcflag_t        c_oflag;        /* output flags */
			tcflag_t        c_cflag;        /* control flags */
			tcflag_t        c_lflag;        /* local flags */
			cc_t            c_cc[NCCS];     /* control chars */
			speed_t         c_ispeed;       /* input speed */
			speed_t         c_ospeed;       /* output speed */
		};
--------------------------------------------------------------------------------------
+ int tcgetattr(int, struct termios *)
	it is like 'tcsetattr'.
--------------------------------------------------------------------------------------
+ int tgetent(char *, const char *)
	This function is useful when dealing with different types of terminals and adjusting
behavior based on their capabilities, such as controlling colors, screen size, and
input/output modes.
--------------------------------------------------------------------------------------
+ int tgetflag(char *)
	The tgetflag function is used with the termcap library to retrieve the values ​​of
the boolean capabilities of a terminal. This function is useful for determining whether
a terminal supports a particular feature or not.
--------------------------------------------------------------------------------------
+ int tgetnum(char *)
	The tgetnum function is used with the termcap library to retrieve numeric
capabilities that represent terminal properties, such as the number of columns (cols)
or the number of rows (lines).
--------------------------------------------------------------------------------------
+ char *tgetstr(char *, char **)
	The tgetstr function is used in the termcap library to retrieve string capabilities,
such as Terminal Control Sequences. It can be used to get the escape sequence needed to
perform operations such as moving the cursor, clearing the screen, and changing colors.
--------------------------------------------------------------------------------------
+ char *tgoto(const char *, int, int)
	The tgoto function is used in the termcap library to generate a cursor positioning
escape sequence based on terminal information. It is used with tgetstr to retrieve the
control code, and then with tgoto to specify a specific coordinate for the cursor.
--------------------------------------------------------------------------------------
+ int tputs(const char *, int, int (*)(int))
	The tputs function is used in the termcap library to print the terminal control
codes in a safe way, taking into account possible terminal delays. It is typically
used to print the control codes retrieved using tgetstr or tgoto.
--------------------------------------------------------------------------------------


**************************************************************************************
************************************** Execute ***************************************
**************************************************************************************

+ pid_t wait(int *)
	It stops the current process until its
brother finishes, regardless of father or
son. he return that status of his brother.
--------------------------------------------------------------------------------------
+ pid_t waitpid(pid_t, int *, int)
	like base 'wait', but you can give it a
specific pid:
	-1 → Wait for any child process.
	0 → Wait for any process in the same process group as the calling process.
	> 0 → Wait only for the process whose id is pid.
	< -1 → Wait for any process in the process group whose id is equal to the absolute value of pid.

And the three arg has to flags:
- WNOHANG: If no child has exited yet,
return immediately with 0 instead of blocking.
- WUNTRACED: Return if a child has stopped
(but not terminated), and its status has
been reported.
--------------------------------------------------------------------------------------
+ pid_t wait4(pid_t, int *, int, struct rusage *)
	A more detailed version of waitpid() that
allows collecting information about resource
consumption from the child process:
struct  rusage {
	struct timeval ru_utime;        # user time used
	struct timeval ru_stime;        # system time used (syscalls)
	long    ru_maxrss;              # max resident set size (RAM)
	long    ru_ixrss;               # integral shared memory size
	long    ru_idrss;               # integral unshared data
	long    ru_isrss;               # integral unshared stack
	long    ru_minflt;              # page reclaims (NU)
	long    ru_majflt;              # page faults (NU)
	long    ru_nswap;               # swaps (NU)
	long    ru_inblock;             # block input operations (atomic)
	long    ru_oublock;             # block output operations (atomic)
	long    ru_msgsnd;              # messages sent (atomic)
	long    ru_msgrcv;              # messages received (atomic)
	long    ru_nsignals;            # signals received (atomic)
	long    ru_nvcsw;               # voluntary context switches (atomic)
	long    ru_nivcsw;              # involuntary
};
--------------------------------------------------------------------------------------
+ pid_t wait3(int *, int, struct rusage *)
	Like 'wait4' but always waits for any process (pid = -1).
--------------------------------------------------------------------------------------
+ char *getcwd(char *, size_t)
	get the currently pwd, and you can stord
it in ptr.
--------------------------------------------------------------------------------------
+ int chdir(const char *)
	change current directory.
--------------------------------------------------------------------------------------
+  int stat(const char *, struct stat *)
	he get to you info of file:
struct stat
{
	dev_t		st_dev;           # ID of device containing file like [USB, Macintosh HD]
	mode_t		st_mode;          # details of file like [file or directory, permision]
	nlink_t		st_nlink;         # Number of hard links
	__darwin_ino64_t st_ino;      # File serial number
	uid_t		st_uid;           # User ID of the file
	gid_t		st_gid;           # Group ID of the file
	dev_t		st_rdev;          # Device ID if the file is a device like '/dev/sda'
	__DARWIN_STRUCT_STAT64_TIMES  # This is likely a macro that is expanded to include time information:
								  ## st_atime: Last access time of file
								  ## st_mtime: Last modification time
								  ## st_ctime: Last metadata change time
	off_t		st_size;          # file size, in bytes
	blkcnt_t	st_blocks;        # blocks allocated for file
	blksize_t	st_blksize;       # optimal blocksize for I/O
	__uint32_t	st_flags;         # user defined flags for file
	__uint32_t	st_gen;           # file generation number
}
--------------------------------------------------------------------------------------
+ int lstat(const char *, struct stat *)
	like 'stat' but he work with Symbolic
Links Files.
--------------------------------------------------------------------------------------
+ int fstat(int, struct stat *)
	Used to get information about an already open file via the file descriptor
instead of its name.
--------------------------------------------------------------------------------------
+ DIR *opendir(const char *)
	open directory, if he fail return (NULL).
typedef struct {
	int							__dd_fd;	 # file descriptor of dir
	long						__dd_loc;	 # offset in current buffer
	long						__dd_size;	 /* amount of data returned
	char						*__dd_buf;	 /* data buffer */
	int							__dd_len;	 /* size of data buffer */
	long						__dd_seek;	 /* magic cookie returned */
	__unused long				__padding;   /* (__dd_rewind space left for bincompat) */
	int							__dd_flags;  /* flags for readdir */
	__darwin_pthread_mutex_t	__dd_lock;   /* for thread locking */
	struct _telldir				*__dd_td;    /* telldir position recording */
} DIR;
--------------------------------------------------------------------------------------
+ struct dirent *readdir(DIR *)
	Returns a pointer to a struct dirent that contains information about the next entry
in the directory. If there are no more entries, or an error occurs, returns NULL.
struct dirent {
    ino_t          d_ino;       # The inode number of the file
    off_t          d_off;       # Intra-directory offset (may not be supported on some systems)
    unsigned short d_reclen;    # Length of this entry
    unsigned char  d_type;      # Input type (file, folder, link...)
    char           d_name[];    # File or directory name (ending with `\0`)
};
--------------------------------------------------------------------------------------
+ int closedir(DIR *)
	colse directory.
--------------------------------------------------------------------------------------
+ int isatty(int)
	The isatty function is used to check whether a file descriptor points to a terminal
or not.
Return value:
	Returns 1 if fd is connected to a terminal (such as a terminal window or console).
	Returns 0 if fd is not connected to a terminal (such as a regular file or pipe).
--------------------------------------------------------------------------------------
+ char *ttyname(int)
	The ttyname function is used to get the device name associated with a file
descriptor that represents a terminal.
Parameter fd → File descriptor, such as STDIN_FILENO, STDOUT_FILENO, or STDERR_FILENO.
Return value:
	A pointer to a string (char *) representing the device name (e.g. /dev/tty1).
	NULL if fd is not connected to a terminal, with error details stored in errno.
--------------------------------------------------------------------------------------
+ int ttyslot(void)
	?
--------------------------------------------------------------------------------------
+ int ioctl(int, unsigned long, ...)
	?
--------------------------------------------------------------------------------------
+ char *getenv(const char *)
	The getenv function is used to get the value of a given environment variable in the
system.
Parameters:
	name → The name of the requested environment variable (e.g. "HOME", "PATH", "USER").
Return value:
	A pointer (char *) to a string containing the value of the environment variable
if it exists.
	NULL if the variable does not exist.
--------------------------------------------------------------------------------------
